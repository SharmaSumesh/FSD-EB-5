// const a = {
//     name:'sumesh',
//     lname:'sharma',
//     data:function()
//     {
//         return this.name +' '+ this.lname
//     }
// }
// console.log(a.data());
// const b = {
//     name:'rahul',
//     lname:'kumar',
   
    
// }
// const c = {
//     name:'kapil',
//     lname:'amit'
// }
// console.log(a.data.call(c))
// console.log(a.data.(call));
// // a = object name that function is define 
// // data = name of function 
// call is predefine keywords in js 
// it can be used to invoke or call a method and function an owner object as an its argumensts 
// Apply: -
// const a = {
//     name:'sumesh',
//     lname:'sharma',
//     data:function()
//     {
//         return this.name +' '+ this.lname
//     }
// }
// console.log(a.data());
// const b = {
//     name:'rahul',
//     lname:'kumar',
   
    
// }
// console.log(a.data.apply(b,['amit','kumar']));
// const a = 
// {
//     data:function(city,country)
//     {
//         return this.firstname+' '+  this.lastname +' '+ city+' '+ country;
//     }
// }
// const b = 
// {
//     firstname:'Amit',
//     lastname:'kumar'
// }
// console.log(a.data.apply(b,)['delhi','india']);
// Apply :- 

// the apply keyword is used to pass the data 
// the apply method takes arguments as an array 
// Ques: - // create two object a and b  fill informatin like (name,lanme,id) call in b :- 

// Bind:- 
// const a = 
// {
//     name:'sumesh',
//     lanme:'sharma',
//     data:function()
//     {
//         return this.name + ' '+ this.lanme;
//     }
// }
// const b = 
// {
//     name:'Rahul',
//     lanme:'kumar'
// }
// let fulldata = a.data.bind(b);
// console.log(fulldata);
// closure: - 
// function Counter()
// {
//     var count = 0; // outer 
//     function increase() //inner
//     {
//         return count+=1;
//     }
//     return increase;
// }
// var counter = Counter();
// console.log(counter());
// function a()
// {
//     var a = 'hello world'
//     function b()
//     {
//         console.log(a);
//     }
//     b();
    
// }
// a();
// the bind function is used to allow an object to borrow a method 
// from anothe object 
// const a = {
//     name:'sumesh',
//     lname:'sharma',
//     data:function()
//     {
//         return this.name+' '+  this.lname;
//     }
// }
// const b = 
// {
//    name:'rahul',
//    lname:'kumar'
// }
// let r = a.data.bind(b);
// console.log(r());
// callback: - 
// function a()
// {
//     console.log('hello world');
// }
// function b()
// {
//     console.log('hello india');
// }
// a();
// b();
// callback: - 
// a function is a block of code that perform a certain task where called 

// you can pass a function as an arguments to a function this function that passed 
// as an arguments inside the another function is called a callback function
// function somo(name)
// {
// console.log(name)
// }
// somo('sumesh');
//  function somo(name,callback)
//  {
//      console.log(name);
//      callback();
//  }
//  function callme()
//  {
//      console.log('hello world')
     
//  }
//  function a()
//  {
//      console.log('hello india')
//  }
//  somo('sumesh',a);
// function a()
// {
//     console.log('hello india');
// }
// function b(name)
// {
//     console.log(name);
// }
// setTimeout(a,1000); 
// b('sumesh');
// const a = new Promise(function(resolve,reject)
// {
//    //body of Promise
// resolve();
// reject();
// })
// A Promise is an object the eventual compleation and failure of an operation 
// A Promise is return object both the production code and call to the 
// consuming code.it can used to deal Asynchronous operation in js
// const promiseobj = new Promise((resolve,reject)=>{
//     let req = 2;
//     if(req==true)
//     {
//         resolve("Request is success");
//     }
//     else
//     {
//         reject("Request is rejected")
//     }
// });
// promiseobj.then((value)=>{
//      console.log(value);
// },(error)=>{
//     console.log(error)
// })
// const p = new Promise((resolve,reject)=>
// {
//     resolve(value)
//     reject(error);
// })
// .then => it takes two argument callback function for the success and failure
// .catch=>the method is used to handle the error in promise 
// .finally=> the finally settled the promise
// const promiseobj = new Promise((resolve,reject)=>{
//     let req = true;
//     if(req==2)
//     {
//         resolve("ok")
//     }
//     else
//     {
//         reject("no")
//     }
// }).then((value)=>{console.log(value);})
// .catch((error)=>{console.log(error);}).
// finally(()=>{console.log("done")})
// async and await :- 
// async : - this keyword is used to turn a function declartion to async function
// await : -  the await operator is used to wait the promise it can only be used inside 
// an async function 
// let test =  async()=>'hello';
// test().then((result)=>{
//     console.log(result);
// })
// // await: - 
// async function test()
// {
//     console.log('1 message');
//     await console.log('2 message');
//     console.log("3 message")
// }
// console.log('4 message')
// test();
// console.log('5 message');
// What is DSA: - 
// Dsa is made with three words first d for data and s for structure A Algorithums
// // 1)Array
// 2)String 
// 3)linked list 
// 4)Queue 
// 5) Stack
// 6)Tree and Graph
// java then c++ and c and python js 
// Array : - 
// const a = [1,2,3,4,5,6,7,8,8,8,8];
// console.log(a[0]);
// console.log(a[3]);
// console.log(a[10]);
// console.log(a.length);
// concat: - 
// const a = [1,2,3,4];
// const b = [5,6,7,8];
// // output : - [1,2,3,4,5,6,7,8]
// let c = a.concat(b);
// console.log(c);
// indexof:-
// const a = [1,2,3,4];
// let b = a.indexOf('3');
// console.log(b);
// join :- 
// const a = [1,2,3,4];
// let b = a.join("sumesh");
// console.log(b);
// pop: -
// const a = [1,2,3,4];
// console.log(a.pop());
// console.log(a);
// push:- 
// const a = [1,2,3,4];
// console.log(a.push(5));
// console.log(a);
// reverse: - 
// const a = [1,2,3,4];
// console.log(a.reverse());
// sort: - 
// const a = [1,4,3,2];
// console.log(a.sort());
// Reverse an array : - 
// 1)first method using reverse keyword
// 2)using for loop
// const a = [1,2,3,4,5];
// for(let i=a.length;i>0;i--)
// {
//     console.log(i);
// }
// 1)linear search 
// 2)Binary search
// 3)Ternary search
// linear search:- 
// const a = [1,2,3,4,5];
// key =3;
// for(let i=0;i<a.length;i++)
// {
//     if(a[i]==key)
//     {
//         console.log(i);
//     }
// }
// const a = ['sumesh','rahul','amit','kumar'];
// key  = 'kumar'
// for(let i=0;i<a.length;i++)
// {
//     if(a[i]==key)
//     {
//         console.log(i)
//     }
//     else
//     {
//         console.log("not presnt");
//     }
// }
// binary search: - 
// const a = [1,2,3,4,5,6];
// key =4;
// function binary(a,key)
// {
//     let start=0; //first  
//     let end = a.length-1; //last
//     while(start<=end)
//     {
//         let mid = start+end/2;
//         if(a[mid]==key)
//         {
//             return mid;
//         }
//         else if(a[mid]<key)
//         {
//             start = mid+1;
//         }
//         else
//         {
//             end = mid+1;
//         }
//     }
//     return -1;
    
// }
// console.log(binary(a,key));
// bubble sort 
// inseration sort
// merge sort 
// heap sort 
// quick sort 
// selection sort 
// bubble sort:-
const a = [1,3,2,4,5];
















